General:
	The Pre-Requisites and the documentation are well written and clear. I would recommend fixing the filing system as how it currently is, it is difficult to navigate and find the appropriate files one might be looking for. The names of files and folders themselves should also be kept relevant and given shorter more accurate names to aid organization. The wiki is empty so I would suggest writing it.
Python:
	I do not really have much to say on this apart that the code looks good. The Stack class and it’s functions are well made and the variety of different operations available enhance the testing possibilities. The only thing I would recommend adding is an extra option in the menu that does all the functions one after the other the highlight the goal of this project which is to have the testing done automatically. I recommend having some known initial values in the stack and after performing each operation, the program would test out the function that it just did to ensure that it was done successfully. Then at the end of this after completing and checking each function, if all the functions were done correctly, a message would show if everything was successful or not. Also while testing the index function, if I entered the same value more than one time, then only the latest entrance would be displayed as found instead of the rest of that same value’s occurrences. This will aid and give more depth to the testing. Also when displaying the stack, the output could be clearer in terms that the latest element added to the stack should be displayed first rather than the last one. These two are however only some minor recommendations, the major update I recommend is the one to make the testing automated as it is an important part of this project. 
CS:
	The CS variant of the project takes a slightly different approach but also does the job very well. The automated testing aspect is done well. Some more comments would help make the understanding of the code easier in the Program.cs class. The test case names in the MyNunitTest.cs class could also be a little more to the point and shorter to make it more read-able. The only recommendation I suggest is like the one I suggested for the Python part of this project, and that is to add another option in the menu that does and tests out all the functions one after the other. After each operation the program could then display the results of the previous test (i.e. success or fail) and then move on to do the same process for the next stack operation.
